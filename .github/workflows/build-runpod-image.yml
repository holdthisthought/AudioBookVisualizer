name: Build and Push RunPod Docker Image

on:
  push:
    branches:
      - main
    paths:
      - 'runpod/**'
      - '.github/workflows/build-runpod-image.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'runpod/**'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Image tag (leave empty for latest)'
        required: false
        default: 'latest'

env:
  REGISTRY: docker.io
  IMAGE_NAME: chester00000/audiobook-visualizer-flux

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event.inputs.tag != '' }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./runpod
          file: ./runpod/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
      
      - name: Update README with image info
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "Docker image published: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "Pull command: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"